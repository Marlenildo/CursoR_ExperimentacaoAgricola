---
title: "Exemplos de C√≥digos"
author: "Marlenildo Melo"
date: "2025-08-21"
lang: "pt-BR"
format:
  html:
    theme: cosmo
    include-in-header:
      - text: |
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    toc: true
    toc_float:
      collapsed: false
      smooth_scroll: true
    toc_depth: 4
    number_sections: true
---

# <i class="fas fa-code"></i> Exemplos de C√≥digos {#exemplos-de-c√≥digos}

## üîπ M√≥dulo 1 ‚Äì Introdu√ß√£o ao R e Organiza√ß√£o de Dados

### Aula 1 ‚Äì Instala√ß√£o e primeiros passos

-   Instale o R e o RStudio em seu computador.\

O **R** √© o programa principal, ou seja, a linguagem de programa√ß√£o e o ambiente de c√°lculo.\
√â nele que todos os comandos s√£o processados e as an√°lises estat√≠sticas s√£o realizadas.\
Por isso, o primeiro passo √© instalar o R no computador.\
O download deve ser feito diretamente no site oficial do CRAN (Comprehensive R Archive Network):

<i class="fa-brands fa-r-project"></i> <https://cran.r-project.org/>

Ao abrir o link, basta escolher o sistema operacional do seu computador (Windows, macOS ou Linux) e seguir as instru√ß√µes de instala√ß√£o.\
Com isso, voc√™ j√° ter√° o R funcionando, embora a sua interface seja bastante simples e pouco intuitiva para quem est√° come√ßando.

√â justamente nesse ponto que entra o **RStudio**.\
O RStudio n√£o √© um programa separado do R, mas sim uma **IDE (Integrated Development Environment)**, ou seja, um ambiente de desenvolvimento que facilita o uso do R.\
Ele oferece uma interface gr√°fica amig√°vel, onde voc√™ pode escrever c√≥digos, visualizar gr√°ficos, organizar projetos e instalar pacotes com muito mais facilidade.

No entanto, √© fundamental compreender que o RStudio **n√£o funciona sozinho**.\
Ele depende do R j√° instalado na m√°quina, pois √© o R quem executa de fato os c√°lculos.\
Por isso, a ordem correta √©: primeiro instalar o R e, em seguida, instalar o RStudio.

O download do RStudio pode ser feito no site oficial da Posit (empresa respons√°vel pelo software):

üëâ <https://posit.co/download/rstudio-desktop/>

Ao instalar os dois programas, voc√™ ter√° o **R** como motor de c√°lculo e o **RStudio** como painel de controle, trabalhando em conjunto.\
Essa combina√ß√£o √© a mais utilizada no mundo acad√™mico e profissional para an√°lises estat√≠sticas e ci√™ncia de dados.

-   Conhe√ßa os principais pain√©is do RStudio:
    -   *Console* (execu√ß√£o de comandos)\
    -   *Source* (script)\
    -   *Environment/History* (objetos)\
    -   *Plots/Packages/Help*

**Verificando vers√£o do R**

```{r}
# Verificando vers√£o do R
version
```

**Citando o R**

```{r}
# Cita√ß√£o do R
citation()
```

**Opera√ß√µes simples**

```{r}
# Opera√ß√µes simples

## Soma
2 + 2

## Subtra√ß√£o
7 - 2

## Mutiplica√ß√£o
4 * 3

## Divis√£o
10 / 3

## Raiz quadrada
sqrt(25)
```

------------------------------------------------------------------------

### Aula 2 ‚Äì Objetos no R

Nesta aula, aprendemos a criar e manipular objetos no R. Objetos s√£o vari√°veis que armazenam valores ou resultados de c√°lculos, permitindo que possamos reutiliz√°-los em outras opera√ß√µes.

No exemplo apresentado, criamos dois objetos num√©ricos:

```{r}
# Criando objetos
x <- 5
y <- 10
```

Aqui, x recebe o valor 5 e y recebe o valor 10. Em seguida, criamos um terceiro objeto chamado soma, que armazena a soma de x e y:

```{r}
soma <- x + y
soma
```

Ao digitar apenas soma, o R retorna o valor armazenado neste objeto, que neste caso √© 15.

Este exemplo ilustra a forma b√°sica de criar objetos no R e realizar opera√ß√µes simples com eles, fundamental para qualquer an√°lise de dados ou programa√ß√£o no software.

------------------------------------------------------------------------

### Aula 3 ‚Äì Pacotes

No R, os pacotes s√£o conjuntos de fun√ß√µes, dados e recursos que estendem as capacidades b√°sicas do software, permitindo realizar an√°lises mais complexas de forma pr√°tica e eficiente.

No exemplo abaixo, veja como instalar alguns pacotes importantes um de cada vez:

```{r}
#| message: false
#| warning: false
#| eval: false

# Carregando pacotes
install.packages("tidyverse")   # Para manipula√ß√£o e visualiza√ß√£o de dados
install.packages("readxl")      # Para ler arquivos do Excel
install.packages("ExpDes.pt")   # Para planejamento e an√°lise de experimentos agr√≠colas
install.packages("easyanova")   # Para facilitar an√°lises de vari√¢ncia
install.packages("rstatix")     # Para estat√≠sticas descritivas e testes inferenciais

```

Ouse preferir pode instalar v√°rios de uma √∫nica vez:

```{r}
#| message: false
#| warning: false
#| eval: false

# Carregando pacotes
install.packages("tidyverse", "readxl", "ExpDes.pt", "easyanova", "rstatix")

```

No exemplo abaixo, carregamos alguns pacotes importantes:

```{r}
#| message: false
#| warning: false

# Carregando pacotes
library(tidyverse)   # Para manipula√ß√£o e visualiza√ß√£o de dados
library(readxl)      # Para ler arquivos do Excel
library(ExpDes.pt)   # Para planejamento e an√°lise de experimentos agr√≠colas
library(easyanova)   # Para facilitar an√°lises de vari√¢ncia
library(rstatix)     # Para estat√≠sticas descritivas e testes inferenciais

```

------------------------------------------------------------------------

### Aula 4 ‚Äì Importa√ß√£o de Dados

**Importando dados**

Importar dados para o R √© um passo fundamental para qualquer an√°lise. No R, √© poss√≠vel importar dados de diferentes formatos, o que √© essencial para iniciar qualquer an√°lise. O R permite ler diferentes formatos de arquivos, como CSV e Excel.

```{r}

# Importando CSV
# dados_csv <- read.csv("meus_dados.csv", sep = ";", dec = ",")
# L√™ arquivos CSV, permitindo especificar o separador de colunas (sep) e o separador decimal (dec)

# Importando Excel
# dados_excel <- readxl::read_excel("meus_dados.xlsx")
# L√™ planilhas do Excel diretamente para o R

# Importando arquivo de texto (TXT)
# dados_txt <- read.table("meus_dados.txt", header = TRUE, sep = "\t", dec = ".")
# L√™ arquivos de texto, onde 'header = TRUE' indica que a primeira linha cont√©m os nomes das colunas,
# 'sep = "\t"' indica que as colunas s√£o separadas por tabula√ß√£o, e 'dec = "."' define o separador decimal

```

-   `read.csv()` l√™ arquivos no formato CSV (Comma-Separated Values), permitindo especificar o separador de colunas (sep) e o separador decimal (dec). √â indicado para planilhas exportadas como CSV ou dados gerados por outros programas.

-   `read_excel()` (do pacote `readxl`) l√™ arquivos do Excel (.xls ou .xlsx) diretamente, mantendo nomes das colunas e tipos de dados corretamente, o que facilita a importa√ß√£o de planilhas complexas sem precisar convert√™-las.

-   `read.table()` l√™ arquivos de texto simples (TXT ou outros delimitados), oferecendo flexibilidade para especificar se h√° cabe√ßalho (header = TRUE), o separador de colunas (sep) e o separador decimal (dec). √â ideal para arquivos de texto com diferentes formatos de separa√ß√£o.

**Visualizando os dados**

Ap√≥s a importa√ß√£o, podemos visualizar os dados para verificar se foram carregados corretamente: Ap√≥s a importa√ß√£o, √© importante visualizar os dados para conferir se foram carregados corretamente. Para isso, podem ser usadas fun√ß√µes como:

-   `head()` (exibe as primeiras linhas),
-   `summary()` (mostra resumo estat√≠stico das vari√°veis),
-   `str()` (mostra a estrutura do objeto) e
-   `glimpse()` (exibe de forma compacta e leg√≠vel a estrutura e os tipos das vari√°veis).

```{r}

# head(dados_csv)    # Mostra as primeiras linhas do conjunto de dados
# summary(dados_csv) # Mostra um resumo estat√≠stico das vari√°veis
# str(dados_csv)     # Mostra a estrutura do objeto, incluindo tipos de vari√°veis e dimens√µes
# glimpse(dados_csv)  # Mostra todas as vari√°veis, seus tipos e algumas observa√ß√µes de cada coluna

```

------------------------------------------------------------------------

## üîπ M√≥dulo 2 ‚Äì Manipula√ß√£o e Explora√ß√£o de Dados

### Aula 5 ‚Äì Tipos de Vari√°veis em R

1.  **Vari√°veis num√©ricas**
    -   **Cont√≠nuas (`numeric` / `dbl`)**: podem assumir qualquer valor dentro de um intervalo, incluindo decimais.\
        **Exemplo:** Produtividade (t/ha), √Årea (m¬≤)
    -   **Discretas (`integer` / `int`)**: assumem apenas valores inteiros.\
        **Exemplo:** Parcela (identificador das parcelas)
2.  **Vari√°veis categ√≥ricas (fatores) (`factor` / `fct`)**
    -   Representam categorias ou grupos que o R reconhece para an√°lises estat√≠sticas.\
        **Exemplo:** Tratamento, Variedade\
    -   Ideais para an√°lise de vari√¢ncia e compara√ß√µes entre grupos
3.  **Vari√°veis de texto (`character` / `chr`)**
    -   Cont√™m informa√ß√µes textuais ou descritivas, que n√£o t√™m ordem ou significado num√©rico.\
        **Exemplo:** Local (Norte, Sul, Leste)\
    -   N√£o s√£o usadas diretamente em c√°lculos estat√≠sticos, mas servem para identificar ou agrupar dados
4.  **Vari√°veis l√≥gicas (`logical` / `logi`)**
    -   Assumem apenas dois valores: `TRUE` ou `FALSE`\
        **Exemplo:** Irrigado\
    -   √öteis para condi√ß√µes, filtros e an√°lises condicionais
5.  **Outros tipos dispon√≠veis em R**
    -   **Complexo (`complex` / sem abrevia√ß√£o comum)**: n√∫meros complexos, como `1+2i`
    -   **Raw (`raw` / sem abrevia√ß√£o comum)**: representa dados brutos em bytes\
    -   **Date (`Date` / sem abrevia√ß√£o comum)**: datas no formato `"YYYY-MM-DD"`\
    -   **POSIXct / POSIXlt (`POSIXct` / `POSIXlt`)**: datas e horas com tempo
    -   **Ordered factor (`ordered` / `ord`)**: fatores com ordem natural definida

------------------------------------------------------------------------

Neste exemplo, iremos **criar vari√°veis de diferentes tipos** em R ‚Äî num√©ricas cont√≠nuas, num√©ricas discretas e categ√≥ricas (fatores) ‚Äî e, em seguida, **identificar o tipo de cada vari√°vel** usando a fun√ß√£o `class()`.

Isso nos permite compreender como o R armazena cada tipo de dado e como ele ser√° tratado em an√°lises estat√≠sticas.

```{r}
# Num√©rica cont√≠nua
num_cont <- 3.5      # numeric / dbl
class(num_cont) # Checando classes

# Num√©rica discreta
num_disc <- 5L       # integer / int
class(num_disc)

# Fator (categ√≥rica)
trat <- factor(c("T1", "T2", "T3"))  # factor / fct
class(trat)

# Ordered factor
ord_trat <- factor(c("Baixo", "M√©dio", "Alto"), ordered = TRUE) # ordered / ord
class(ord_trat)

# Character
local <- c("Norte", "Sul")  # character / chr
class(local)

# L√≥gica
irr <- c(TRUE, FALSE)       # logical / logi
class(irr)

# Complexo
cplx <- 1 + 2i              # complex
class(cplx)

# Raw
r <- charToRaw("A")         # raw
class(r)

# Datas
d <- as.Date("2025-08-29")  # Date
class(d)

dt <- as.POSIXct("2025-08-29 12:00:00") # POSIXct
class(dt)

```

<br>

**Criando banco de dados fict√≠cio**

Neste exemplo, iremos **criar um banco de dados fict√≠cio de um experimento agr√≠cola** com diferentes tipos de vari√°veis: num√©ricas (cont√≠nuas e discretas), categ√≥ricas, l√≥gicas e de texto.

Em seguida, iremos **visualizar o banco de dados e identificar os tipos de vari√°veis**, para entender como o R armazena cada tipo e como podemos manipul√°-las em an√°lises estat√≠sticas.

```{r}
# Exemplo de banco de dados de experimento agr√≠cola
dados_agro <- data.frame(
  Parcela = 1:9,                               # Num√©rica discreta (identifica√ß√£o das parcelas)
  Tratamento = factor(rep(c("T1", "T2", "T3"), each = 3)), # Fator (categ√≥rica nominal)
  Variedade = factor(c("A", "A", "A", "B", "B", "B", "C", "C", "C")), # Fator (categ√≥rica nominal)
  Area = c(10, 10, 10, 12, 12, 12, 11, 11, 11),  # Num√©rica cont√≠nua (m¬≤)
  Produtividade = c(30.5, 32.0, 31.0, 28.0, 29.5, 30.0, 33.0, 34.5, 32.5), # Num√©rica cont√≠nua (t/ha)
  Irrigado = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE),   # L√≥gica
  Local = c("Norte", "Norte", "Norte", "Sul", "Sul", "Sul", "Leste", "Leste", "Leste") # Texto (character)
)
```

<br>

**Fun√ß√µes para Visualiza√ß√£o e Estrutura de Dados no R**

1.  **`head(dados_agro)`**\
    Mostra as **primeiras linhas** do conjunto de dados.
    -   √ötil para ter uma **vis√£o r√°pida** do conte√∫do do banco, verificando se os dados foram importados corretamente.\
    -   Exemplo de sa√≠da:

```{r}
head(dados_agro)
```

<br>

2.  **`str(dados_agro)`**

Mostra a **estrutura do objeto**, permitindo entender rapidamente como os dados est√£o organizados no R.

Com essa fun√ß√£o, √© poss√≠vel:

-   Ver o **n√∫mero de observa√ß√µes** (linhas) e o **n√∫mero de vari√°veis** (colunas) do banco de dados, por exemplo, `9 obs. of 7 variables`.\
-   Identificar o **tipo de cada vari√°vel**, como `int` (inteiro), `num` (num√©rico cont√≠nuo), `Factor` (categ√≥rica), `logi` (l√≥gica/boolean) e `chr` (texto).\
-   Conferir **alguns valores iniciais de cada coluna**, ajudando a verificar se os dados foram importados corretamente e se os tipos est√£o adequados para an√°lise.

Em resumo, `str()` √© uma fun√ß√£o essencial para **inspecionar rapidamente a estrutura e os tipos das vari√°veis**, antes de realizar qualquer an√°lise estat√≠stica ou manipula√ß√£o dos dados.

```{r}
str(dados_agro)

```

<br>

3.  **`summary(dados_agro)`**

Mostra um **resumo estat√≠stico** das vari√°veis:\
- Para vari√°veis num√©ricas: m√≠nimo, m√°ximo, m√©dia, quartis\
- Para fatores: contagem de cada n√≠vel\
- Para l√≥gicas: contagem de `TRUE` e `FALSE`\
- √ötil para identificar tend√™ncias, valores extremos e distribui√ß√£o dos dados.

```{r}
summary(dados_agro)

```

<br>

4.  **`glimpse(dados_agro)`** (do pacote `dplyr`)

Mostra a **estrutura dos dados de forma compacta e leg√≠vel**, similar ao `str()`, mas em formato horizontal:

-   Exibe todas as vari√°veis, seus tipos e algumas observa√ß√µes iniciais\
-   Mais f√°cil de ler quando o banco de dados tem muitas colunas

Exemplo de sa√≠da (resumida):

```{r}
glimpse(dados_agro)

```

------------------------------------------------------------------------

### Aula 6 ‚Äì Manipula√ß√£o com dplyr

```{r}
# Exemplo fict√≠cio
dados <- data.frame(
  tratamento = rep(c("T1", "T2", "T3"), each = 4),
  repeticao = rep(1:4, 3),
  produtividade = c(30, 32, 28, 31, 35, 36, 34, 37, 25, 27, 26, 28)
)

# Selecionar colunas e filtrar
dados %>% select(tratamento, produtividade) %>% filter(produtividade > 30)

# Resumo estat√≠stico
dados %>%
  group_by(tratamento) %>%
  summarise(
    media = mean(produtividade),
    sd = sd(produtividade)
  )
```

------------------------------------------------------------------------

### Aula 7 ‚Äì Estat√≠stica Descritiva e Gr√°ficos

```{r}
# Histograma
ggplot(dados, aes(x = produtividade)) +
  geom_histogram(binwidth = 2, fill = "skyblue", color = "black")

# Boxplot
ggplot(dados, aes(x = tratamento, y = produtividade)) +
  geom_boxplot(fill = "orange")

```

------------------------------------------------------------------------

## üîπ M√≥dulo 3 ‚Äì An√°lise de Vari√¢ncia (ANOVA)

### Aula 8 ‚Äì ANOVA em DIC

```{r}
# ANOVA usando aov()
modelo <- aov(produtividade ~ tratamento, data = dados)
summary(modelo)

# ANOVA usando ExpDes.pt
dic(
  trat = dados$tratamento,
  resp = dados$produtividade,
  quali = TRUE,
  mcomp = "tukey"
)

# ANOVA usando easyanova
easyanova::ea1(dados[-2], design = 1, plot = 2)
```

------------------------------------------------------------------------

### Aula 9 ‚Äì Testes de Pressupostos

```{r}
# Normalidade
shapiro.test(residuals(modelo))
dados |> group_by(tratamento) |> rstatix::shapiro_test(produtividade)

# Homogeneidade
bartlett.test(produtividade ~ tratamento, data = dados)
rstatix::levene_test(produtividade ~ tratamento, data = dados)
```

------------------------------------------------------------------------

### Aula 10 ‚Äì Compara√ß√µes de M√©dias

```{r}
# Tukey no R base
TukeyHSD(modelo)

# Emmeans
library(emmeans)
emmeans(modelo, pairwise ~ tratamento)

# rstatix
dados %>% anova_test(produtividade ~ tratamento)
dados %>% tukey_hsd(produtividade ~ tratamento)
```

------------------------------------------------------------------------

### Aula 11 ‚Äì ANOVA Fatorial

```{r}
# Exemplo com dois fatores
dados2 <- expand.grid(
  adubacao = c("A1", "A2"),
  cultivar = c("C1", "C2", "C3"),
  rep = 1:4
)
set.seed(123)
dados2$produtividade <- rnorm(24, mean = 30, sd = 3)

# ANOVA
modelo2 <- aov(produtividade ~ adubacao * cultivar, data = dados2)
summary(modelo2)

# ExpDes.pt
fat2.dic(
  fator1 = dados2$adubacao,
  fator2 = dados2$cultivar,
  resp = dados2$produtividade,
  quali = c(TRUE, TRUE),
  mcomp = "tukey"
)
```

------------------------------------------------------------------------

## üîπ M√≥dulo 4 ‚Äì Regress√£o

### Aula 12 ‚Äì Regress√£o Linear

```{r}
dose <- c(0, 50, 100, 150, 200)
prod <- c(20, 28, 35, 40, 38)
dados_reg <- data.frame(dose, prod)

modelo_reg <- lm(prod ~ dose, data = dados_reg)
a <- summary(modelo_reg)

# Coeficientes
coeficientes <- coef(modelo_reg)
intercepto <- round(coeficientes[1], 2) # sem sinal extra
slope <- formatC(coeficientes[2], format = "f", digits = 2, flag = "+") # sempre com sinal

# Estat√≠sticas do modelo
r2 <- round(a$r.squared, 4)
f_value <- a$fstatistic[1]
df1 <- a$fstatistic[2]
df2 <- a$fstatistic[3]
p_value_anova <- pf(f_value, df1, df2, lower.tail = FALSE)




# Equa√ß√£o no formato correto
equacao <- paste0("y = ", intercepto, slope, "x")

legenda <- paste0(
  equacao,
  "  R¬≤ = ", r2,
  "\nF = ", f_value,
  "; p = ", format.pval(p_value_anova, digits = 4, eps = 0.001)
)



dados_reg |>
  ggplot(aes(x = dose, y = prod)) +
  geom_point(size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  annotate("text",
           x = 100, y = 10,
           label = legenda,
           hjust = 0, size = 5) +
  labs(x = "Frequ√™ncia de irriga√ß√£o", y = "CRA (%)") +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  ylim(0, 50)

```

------------------------------------------------------------------------

### Aula 13 ‚Äì Regress√£o Quadr√°tica

```{r}
# Ajustar modelo de regress√£o quadr√°tica
modelo_quad <- lm(prod ~ dose + I(dose^2), data = dados_reg)
a <- summary(modelo_quad)
a
# Coeficientes da regress√£o quadr√°tica (com mais casas decimais)
coef_quad <- coef(modelo_quad)
intercepto <- formatC(coef_quad[1], format = "f", digits = 4)
linear     <- formatC(coef_quad[2], format = "f", digits = 4, flag = "+")
quadratico <- formatC(coef_quad[3], format = "f", digits = 4, flag = "+") 
# usei 6 casas para o termo quadr√°tico porque geralmente √© bem pequeno

# Estat√≠sticas do modelo
r2 <- round(a$r.squared, 4)
f_value <- a$fstatistic[1]
df1 <- a$fstatistic[2]
df2 <- a$fstatistic[3]
p_value_anova <- pf(f_value, df1, df2, lower.tail = FALSE)

# Equa√ß√£o para legenda
equacao <- paste0("y = ", intercepto, " ", linear, "x ", quadratico, "x¬≤")
legenda <- paste0(
  equacao,
  "  R¬≤ = ", r2,
  "\nF = ", round(f_value, 2),
  "; p = ", format.pval(p_value_anova, digits = 4, eps = 0.001)
)

# Gr√°fico
library(ggplot2)

regressao_quad <- ggplot(dados_reg, aes(x = dose, y = prod)) +
  geom_point(size = 3) +
  stat_smooth(
    method = "lm",
    formula = y ~ x + I(x^2),
    se = FALSE,
    color = "black"
  ) +
  annotate("text", x = 50, y = 10, label = legenda, hjust = 0, size = 5) +
  labs(x = "Dose", y = "Produ√ß√£o") +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  ylim(0, 50)

# Exibir gr√°fico
regressao_quad

```

## üîπ M√≥dulo 5 ‚Äì Relat√≥rios e Projeto Final

### Aula 14 ‚Äì Relat√≥rios com RMarkdown

-   Este pr√≥prio arquivo √© um exemplo.\
-   Pode ser exportado em HTML, Word ou PDF.

------------------------------------------------------------------------

## ‚úÖ Projeto Final

Analise um conjunto de dados agr√≠colas (real ou fornecido):\
- Estruture os dados no Excel/CSV.\
- Importe para o R.\
- Realize ANOVA (com `aov()`, `ExpDes.pt`, `easyanova` e `rstatix`).\
- Teste pressupostos.\
- Se necess√°rio, ajuste modelos de regress√£o.\
- Gere gr√°ficos com `ggplot2`.\
- Organize os resultados em relat√≥rio RMarkdown.

------------------------------------------------------------------------